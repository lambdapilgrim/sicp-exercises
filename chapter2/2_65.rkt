#!/usr/bin/env racket
#lang racket

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))


(define (list->tree elements)
  (define (partial-tree elts n)
    (if (= n 0)
        (cons '() elts)
        (let ((left-size (quotient (- n 1) 2)))
          (let ((left-result (partial-tree elts left-size)))
            (let ((left-tree (car left-result))
                  (non-left-elts (cdr left-result))
                  (right-size (- n (+ left-size 1))))
              (let ((this-entry (car non-left-elts))
                    (right-result (partial-tree (cdr non-left-elts)
                                                right-size)))
                (let ((right-tree (car right-result))
                      (remaining-elts (cdr right-result)))
                  (cons (make-tree this-entry left-tree right-tree)
                        remaining-elts))))))))
  (car (partial-tree elements (length elements))))

(define (intersection-set-list set1 set2)
  (if (or (null? set1) (null? set2))
      '()    
      (let ((x1 (car set1)) (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1
                     (intersection-set-list (cdr set1)
                                       (cdr set2))))
              ((< x1 x2)
               (intersection-set-list (cdr set1) set2))
              ((< x2 x1)
               (intersection-set-list set1 (cdr set2)))))))

(define (intersection-set set1 set2)
  (let ((set1-list (tree->list set1))
        (set2-list (tree->list set2)))
    (let ((int-list (intersection-set-list set1-list set2-list)))
      (list->tree int-list))))

(define (union-set-list set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((= (car set1) (car set2)) (cons (car set1) (union-set-list (cdr set1) (cdr set2))))
        ((> (car set1) (car set2)) (cons (car set2) (union-set-list set1 (cdr set2))))
        (else (cons (car set1) (union-set-list (cdr set1) set2)))))

(define (union-set set1 set2)
  (let ((set1-list (tree->list set1))
        (set2-list (tree->list set2)))
    (let ((union-list (union-set-list set1-list set2-list)))
      (list->tree union-list))))
  
(intersection-set '(2 (1 () ()) ()) '(3 (1 () (2 () ())) ()))
(intersection-set '(5 (3 (1 () ()) ()) (9 (7 () ()) (11 () ()))) '(9 (5 (3 () ()) ()) (11 () ())))
(union-set '(2 (1 () ()) ()) '(3 (1 () (2 () ())) ()))
(union-set '(5 (3 (1 () ()) ()) (9 (7 () ()) (11 () ()))) '(9 (5 (3 () ()) ()) (11 () ())))

;Result:
;'(1 () (2 () ()))
;'(5 (3 () ()) (9 () (11 () ())))
;'(2 (1 () ()) (3 () ()))
;'(5 (1 () (3 () ())) (9 (7 () ()) (11 () ())))
